library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT language, COUNT(*) AS num_films FROM film GROUP BY language;"
results <- dbGetQuery(conn, query)
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT name, COUNT(*) AS num_films FROM film LEFT JOIN language GROUP BY language_id;"
results <- dbGetQuery(conn, query)
view(sakila.db)
View(sakila.db)
help("dbConnect")
library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
dbListTables(conn)
q <- "SELECT * FROM film, language"
dbGetQuery(conn, q)
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
View(results)
# Get the query plan for the query
query_plan <- dbGetQuery(conn, "EXPLAIN QUERY PLAN " + query)
query_plan <- dbGetQuery(conn, "EXPLAIN QUERY PLAN " + query)
# Get the query plan for the query
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, "EXPLAIN QUERY PLAN " + query)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query <- "SELECT title, category, length FROM film WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query <- "SELECT f.title, c.category, f.length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query_plan <- dbGetQuery(conn, "EXPLAIN QUERY PLAN " + query)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Create a user-defined index called "TitleIndex" on the column `TITLE` in the table `FILM`
query <- "CREATE INDEX TitleIndex ON film (title);"
dbExecute(conn, query)
# Re-run the query from step 3 now that you have an index
query <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Measure the execution time of the queries in steps 3 and 6
query_3_time <- system.time(dbGetQuery(conn, query))
query_6_time <- system.time(dbGetQuery(conn, query))
# Print the execution times
print(query_3_time)
print(query_6_time)
# Get the title, language and length of all films with the word "GOLD" with any capitalization in its name
query <- "SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query3 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query3)
# Print the results
print(results)
query_3_time <- system.time(dbGetQuery(conn, query3))
# Get the title, category name and length of the film with the title "ZORRO ARK"
query3 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query3)
# Print the results
print(results)
query_3_time <- system.time(dbGetQuery(conn, query3))
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Create a user-defined index called "TitleIndex" on the column `TITLE` in the table `FILM`
query <- "CREATE INDEX TitleIndex ON film (title);"
dbExecute(conn, query)
# Re-run the query from step 3 now that you have an index
query6 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query6)
# Print the results
print(results)
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Measure the execution time of the queries in steps 3 and 6
query_6_time <- system.time(dbGetQuery(conn, query6))
# Print the execution times
print(query_3_time)
print(query_6_time)
# Get the title, language and length of all films with the word "GOLD" with any capitalization in its name
query <- "SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
View(conn)
library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
# Get a list of all indexes
indexes <- dbListTables(conn)
# Loop through the indexes and delete them
for (index in indexes) {
if (grepl("^index_", index)) {
dbRemoveIndex(conn, index)
}
}
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query3 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query3)
# Print the results
print(results)
query_3_time <- system.time(dbGetQuery(conn, query3))
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Create a user-defined index called "TitleIndex" on the column `TITLE` in the table `FILM`
query <- "CREATE INDEX TitleIndex ON film (title);"
dbExecute(conn, query)
dbListTables(conn)
sqlite_master
dbListTables(sqlite_master)
dbListTables("sqlite_master")
# Get a list of all indexes
dbExecute(conn, "SELECT name FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query3 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query3)
# Print the results
print(results)
query_3_time <- system.time(dbGetQuery(conn, query3))
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Create a user-defined index called "TitleIndex" on the column `TITLE` in the table `FILM`
query <- "CREATE INDEX TitleIndex ON film (title);"
dbExecute(conn, query)
# Get a list of all indexes
dbExecute(conn, "DELETE FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
# Get a list of all indexes
dbExecute(conn, "DELETE * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for index in indexes:
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for index in indexes {
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for (index in indexes) {
query <- "DELETE " + index + "FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';"
dbExecute(conn, query)
}
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for (index in indexes) {
query <- paste("DELETE ", index, "FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';",sep="")
dbExecute(conn, query)
}
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for (index in indexes) {
query <- paste("DELETE ", paste(index, "FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';",sep=""), sep="")
dbExecute(conn, query)
}
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for (index in indexes) {
query <- paste("DELETE ", paste( index, "FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';",sep=""), sep="")
dbExecute(conn, query)
}
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
library(DBI)
library(RSQLite)
# Connect to the SQLite database
conn <- dbConnect(RSQLite::SQLite(), "sakila.db")
# Get a list of all indexes
indexes <- dbGetQuery(conn, "SELECT * FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';")
for (index in indexes) {
query <- paste("DELETE ", paste( index, "FROM sqlite_master WHERE type == 'index' AND tbl_name == 'film';",sep=""), sep="")
dbExecute(conn, query)
}
# Get a list of all indexes
# Get the name of the table
table_name <- "film"
# Get a list of all indexes for the table
indexes <- dbListIndexes(conn, table_name)
# Get a list of all indexes
# Get the name of the table
table_name <- "film"
dbExecute(conn, "DROP INDEX TitleIndex;")
# Get the number of films per language
query <- "SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT l.name, COUNT(*) AS num_films FROM film f LEFT JOIN language l ON f.language_id=l.language_id GROUP BY f.language_id;"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Get the title, category name and length of the film with the title "ZORRO ARK"
query3 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query3)
# Print the results
print(results)
query_3_time <- system.time(dbGetQuery(conn, query3))
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Create a user-defined index called "TitleIndex" on the column `TITLE` in the table `FILM`
query <- "CREATE INDEX TitleIndex ON film (title);"
dbExecute(conn, query)
# Re-run the query from step 3 now that you have an index
query6 <- "SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
results <- dbGetQuery(conn, query6)
# Print the results
print(results)
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, c.name AS category, f.length AS length FROM film f JOIN film_category fc ON f.film_id=fc.film_id JOIN category c ON fc.category_id=c.category_id WHERE title = 'ZORRO ARK';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Measure the execution time of the queries in steps 3 and 6
query_6_time <- system.time(dbGetQuery(conn, query6))
# Print the execution times
print(query_3_time)
print(query_6_time)
# Get the title, language and length of all films with the word "GOLD" with any capitalization in its name
query <- "SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
results <- dbGetQuery(conn, query)
# Print the results
print(results)
# Get the query plan for the query
query <- "EXPLAIN QUERY PLAN SELECT f.title AS title, l.name AS language, f.length AS length FROM film f LEFT JOIN language l ON f.language_id=l.language_id WHERE title LIKE '%GOLD%';"
query_plan <- dbGetQuery(conn, query)
# Print the query plan
print(query_plan)
# Print the execution times
print("Query 3: \n")
print(query_3_time)
print("\nQuery 3: \n")
print(query_6_time)
# Print the execution times
print("Query 3: ")
print(query_3_time)
print("Query 6: ")
print(query_6_time)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9632314"
db_user_fh <- "sql9632314"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "UHtEQ9k3WN"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9632314"
db_user_fh <- "sql9632314"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "UHtEQ9k3WN"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
bds.raw$flight_date <- as.Date(bds.raw$flight_date, format = "%m/%d/%Y")
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
rs <- dbGetQuery(mydb, "select month(f.dates) as month, year(f.dates) as year, count(*) as total_strikes
from strikes s left join flights f on s.fid = f.fid group by year(f.dates), month(f.dates)
order by year(f.dates), month(f.dates);")
rs
library(plotly)
fig = plot_ly(x = rs$month, y = rs$total_strikes, type="scatter", mode = "heatmap")
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
