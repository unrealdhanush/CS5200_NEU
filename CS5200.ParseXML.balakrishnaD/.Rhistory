books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% as.double(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
)) %>%
left_join(genres, by = "Genre")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
# Define the tables
dbExecute(con, "
CREATE TABLE Genre (
GenreID INTEGER PRIMARY KEY,
GenreName TEXT
);")
dbExecute(con, "
CREATE TABLE Author (
AuthorID INTEGER PRIMARY KEY,
AuthorName TEXT
);")
dbExecute(con, "
CREATE TABLE Book (
BookID TEXT PRIMARY KEY,
Title TEXT,
GenreID INTEGER,
Price REAL,
PublishDate TEXT,
Description TEXT,
FOREIGN KEY (GenreID) REFERENCES Genre(GenreID)
);")
dbExecute(con, "
CREATE TABLE BookAuthor (
BookID TEXT,
AuthorID INTEGER,
FOREIGN KEY (BookID) REFERENCES Book(BookID),
FOREIGN KEY (AuthorID) REFERENCES Author(AuthorID)
);
")
library(xml2)
library(dplyr)
library(DBI)
library(purrr)
# Load XML data
xml_data <- read_xml("Books-v4.xml")
# Extract data from XML
genres <- xml_data %>%
xml_find_all(".//genre") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "GenreName") %>%
mutate(GenreID = row_number())
books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% xml_text() %>% as.numeric(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
)) %>%
left_join(genres, by = "Genre")
View(genres)
library(xml2)
library(dplyr)
library(DBI)
library(purrr)
# Load XML data
xml_data <- read_xml("Books-v4.xml")
# Extract data from XML
genres <- xml_data %>%
xml_find_all(".//genre") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "GenreName") %>%
mutate(GenreID = row_number())
books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% xml_text() %>% as.numeric(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
))
authors <- xml_data %>%
xml_find_all(".//book/author") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "AuthorName") %>%
mutate(AuthorID = row_number())
book_authors <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
AuthorName = xml_find_all(.x, ".//author") %>% xml_text()
)) %>%
left_join(authors, by = "AuthorName") %>%
select(-AuthorName)
# Insert data into the database
dbWriteTable(con, "Genre", genres, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Book", books, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Author", authors, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "BookAuthor", book_authors, row.names = FALSE, overwrite = TRUE)
View(books)
View(genres)
View(authors)
View(book_authors)
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT GenreName, COUNT(*) as NumBooks
FROM Book
JOIN Genre USING (GenreID)
GROUP BY GenreID, GenreName
HAVING COUNT(*) >= 3
")
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT GenreName, COUNT(*) as NumBooks
FROM Book
JOIN Genre USING (GenreName)
GROUP BY GenreID, GenreName
HAVING COUNT(*) >= 3
")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
# Define the tables
dbExecute(con, "
CREATE TABLE Genre (
GenreID INTEGER PRIMARY KEY,
GenreName TEXT
);")
dbExecute(con, "
CREATE TABLE Author (
AuthorID INTEGER PRIMARY KEY,
AuthorName TEXT
);")
dbExecute(con, "
CREATE TABLE Book (
BookID TEXT PRIMARY KEY,
Title TEXT,
GenreID INTEGER,
Price REAL,
PublishDate TEXT,
Description TEXT,
FOREIGN KEY (GenreID) REFERENCES Genre(GenreID)
);")
dbExecute(con, "
CREATE TABLE BookAuthor (
BookID TEXT,
AuthorID INTEGER,
FOREIGN KEY (BookID) REFERENCES Book(BookID),
FOREIGN KEY (AuthorID) REFERENCES Author(AuthorID)
);
")
library(xml2)
library(dplyr)
library(DBI)
library(purrr)
# Load XML data
xml_data <- read_xml("Books-v4.xml")
# Extract data from XML
genres <- xml_data %>%
xml_find_all(".//genre") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "Genre") %>%
mutate(GenreID = row_number())
books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% xml_text() %>% as.numeric(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
))
authors <- xml_data %>%
xml_find_all(".//book/author") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "AuthorName") %>%
mutate(AuthorID = row_number())
book_authors <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
AuthorName = xml_find_all(.x, ".//author") %>% xml_text()
)) %>%
left_join(authors, by = "AuthorName") %>%
select(-AuthorName)
# Insert data into the database
dbWriteTable(con, "Genre", genres, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Book", books, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Author", authors, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "BookAuthor", book_authors, row.names = FALSE, overwrite = TRUE)
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT GenreName, COUNT(*) as NumBooks
FROM Book
JOIN Genre USING (GenreName)
GROUP BY GenreID, GenreName
HAVING COUNT(*) >= 3
")
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
HAVING COUNT(*) >= 3
")
# Query 2: Oldest year of publication
query2 <- dbGetQuery(con, "
SELECT MIN(SUBSTR(PublishDate, 1, 4)) as OldestYear
FROM Book
")
# Query 3: Number of books and average price for each genre
query3 <- dbGetQuery(con, "
SELECT GenreName, COUNT(*) as NumBooks, AVG(Price) as AvgPrice
FROM Book
JOIN Genre USING (GenreID)
GROUP BY GenreID, GenreName
")
View(query1)
View(query2)
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
HAVING COUNT(*) >= 3
")
# Query 2: Oldest year of publication
query2 <- dbGetQuery(con, "
SELECT MIN(SUBSTR(PublishDate, 1, 4)) as OldestYear
FROM Book
")
# Query 3: Number of books and average price for each genre
query3 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks, AVG(Price) as AvgPrice
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
")
# Query 4: Books with more than one author
query4 <- dbGetQuery(con, "
SELECT Title, COUNT(*) as NumAuthors
FROM BookAuthor
JOIN Book USING (BookID)
GROUP BY BookID, Title
HAVING COUNT(*) > 1
")
# Query 5: Books with price less than 0.8*AVG or more than 1.2*AVG
query5 <- dbGetQuery(con, "
SELECT Title, AuthorName
FROM Book
JOIN Genre USING (GenreID)
JOIN BookAuthor USING (BookID)
JOIN Author USING (AuthorID)
WHERE Price < 0.8 * (SELECT AVG(Price) FROM Book) OR
Price > 1.2 * (SELECT AVG(Price) FROM Book)
")
View(query4)
View(query3)
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
HAVING COUNT(*) >= 3
")
# Query 2: Oldest year of publication
query2 <- dbGetQuery(con, "
SELECT MIN(SUBSTR(PublishDate, 1, 4)) as OldestYear
FROM Book
")
# Query 3: Number of books and average price for each genre
query3 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks, AVG(Price) as AvgPrice
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
")
# Query 4: Books with more than one author
query4 <- dbGetQuery(con, "
SELECT Title, COUNT(*) as NumAuthors
FROM BookAuthor
JOIN Book USING (BookID)
GROUP BY BookID, Title
HAVING COUNT(*) > 1
")
# Query 5: Books with price less than 0.8*AVG or more than 1.2*AVG
query5 <- dbGetQuery(con, "
SELECT Title, AuthorName
FROM Book
JOIN Genre USING (Genre)
JOIN BookAuthor USING (BookID)
JOIN Author USING (AuthorID)
WHERE Price < 0.8 * (SELECT AVG(Price) FROM Book) OR
Price > 1.2 * (SELECT AVG(Price) FROM Book)
")
# Print the results
print(query1)
print(query2)
print(query3)
print(query4)
print(query5)
dbDisconnect(con)
knitr::include_graphics("https://imgur.com/a/izN8fyW")
knitr::include_graphics("https://imgur.com/a/izN8fyW")
knitr::include_graphics("https://imgur.com/a/DcXOMZk")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
# Define the tables
dbExecute(con, "
CREATE TABLE Genre (
GenreID INTEGER PRIMARY KEY,
GenreName TEXT
);")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
# Define the tables
dbExecute(con, "
CREATE TABLE Genre (
GenreID INTEGER PRIMARY KEY,
GenreName TEXT
);")
dbExecute(con, "
CREATE TABLE Author (
AuthorID INTEGER PRIMARY KEY,
AuthorName TEXT
);")
dbExecute(con, "
CREATE TABLE Book (
BookID TEXT PRIMARY KEY,
Title TEXT,
GenreID INTEGER,
Price REAL,
PublishDate TEXT,
Description TEXT,
FOREIGN KEY (GenreID) REFERENCES Genre(GenreID)
);")
dbExecute(con, "
CREATE TABLE BookAuthor (
BookID TEXT,
AuthorID INTEGER,
FOREIGN KEY (BookID) REFERENCES Book(BookID),
FOREIGN KEY (AuthorID) REFERENCES Author(AuthorID)
);
")
library(xml2)
library(dplyr)
library(DBI)
library(purrr)
# Load XML data
xml_data <- read_xml("Books-v4.xml")
# Extract data from XML
genres <- xml_data %>%
xml_find_all(".//genre") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "Genre") %>%
mutate(GenreID = row_number())
books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% xml_text() %>% as.numeric(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
))
authors <- xml_data %>%
xml_find_all(".//book/author") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "AuthorName") %>%
mutate(AuthorID = row_number())
book_authors <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
AuthorName = xml_find_all(.x, ".//author") %>% xml_text()
)) %>%
left_join(authors, by = "AuthorName") %>%
select(-AuthorName)
# Insert data into the database
dbWriteTable(con, "Genre", genres, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Book", books, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Author", authors, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "BookAuthor", book_authors, row.names = FALSE, overwrite = TRUE)
# Query 1: Number of genres with at least three books
query1 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
HAVING COUNT(*) >= 3
")
# Query 2: Oldest year of publication
query2 <- dbGetQuery(con, "
SELECT MIN(SUBSTR(PublishDate, 1, 4)) as OldestYear
FROM Book
")
# Query 3: Number of books and average price for each genre
query3 <- dbGetQuery(con, "
SELECT b.Genre, COUNT(*) as NumBooks, AVG(Price) as AvgPrice
FROM Book b
JOIN Genre g ON b.Genre = g.Genre
GROUP BY b.Genre
")
# Query 4: Books with more than one author
query4 <- dbGetQuery(con, "
SELECT Title, COUNT(*) as NumAuthors
FROM BookAuthor
JOIN Book USING (BookID)
GROUP BY BookID, Title
HAVING COUNT(*) > 1
")
# Query 5: Books with price less than 0.8*AVG or more than 1.2*AVG
query5 <- dbGetQuery(con, "
SELECT Title, AuthorName
FROM Book
JOIN Genre USING (Genre)
JOIN BookAuthor USING (BookID)
JOIN Author USING (AuthorID)
WHERE Price < 0.8 * (SELECT AVG(Price) FROM Book) OR
Price > 1.2 * (SELECT AVG(Price) FROM Book)
")
# Print the results
print(query1)
print(query2)
print(query3)
print(query4)
print(query5)
dbDisconnect(con)
knitr::include_graphics("https://imgur.com/a/DcXOMZk")
knitr::include_graphics("https://imgur.com/a/DcXOMZk")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
knitr::include_graphics("https://imgur.com/a/DcXOMZk")
library(RSQLite)
# Create a SQLite database
con <- dbConnect(RSQLite::SQLite(), "books.db")
library(xml2)
library(dplyr)
library(DBI)
library(purrr)
# Load XML data
xml_data <- read_xml("Books-v4.xml")
# Extract data from XML
genres <- xml_data %>%
xml_find_all(".//genre") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "Genre") %>%
mutate(GenreID = row_number())
books <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
Title = xml_find_first(.x, ".//title") %>% xml_text(),
Genre = xml_find_first(.x, ".//genre") %>% xml_text(),
Price = xml_find_first(.x, ".//price") %>% xml_text() %>% as.numeric(),
PublishDate = xml_find_first(.x, ".//publish_date") %>% xml_text(),
Description = xml_find_first(.x, ".//description") %>% xml_text()
))
authors <- xml_data %>%
xml_find_all(".//book/author") %>%
xml_text() %>%
unique() %>%
enframe(name = NULL, value = "AuthorName") %>%
mutate(AuthorID = row_number())
book_authors <- xml_data %>%
xml_find_all(".//book") %>%
map_df(~list(
BookID = xml_attr(.x, "id"),
AuthorName = xml_find_all(.x, ".//author") %>% xml_text()
)) %>%
left_join(authors, by = "AuthorName") %>%
select(-AuthorName)
# Insert data into the database
dbWriteTable(con, "Genre", genres, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Book", books, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "Author", authors, row.names = FALSE, overwrite = TRUE)
dbWriteTable(con, "BookAuthor", book_authors, row.names = FALSE, overwrite = TRUE)
knitr::include_graphics("https://imgur.com/a/DcXOMZk")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://imgur.com/niMd57M")
knitr::include_graphics("https://ibb.co/PcSXjmS")
