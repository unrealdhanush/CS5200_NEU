prod TEXT
);")
dbExecute(con, "
CREATE TABLE reps (
repID INTEGER PRIMARY KEY,
firstName TEXT,
lastName TEXT,
territory TEXT
);")
library(DBI)
library(RMySQL)
library(RSQLite)
library(dplyr)
library(tidyverse)
db_name_fh <- "sql9637398"
db_user_fh <- "sql9637398"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "GYPIuqDy7n"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
dbExecute(mysql_con, "
DROP TABLE product_facts, rep_facts;")
dbDisconnect(mysql_con)
# Connect to SQLite
library(RSQLite)
library(XML)
con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
# Create tables
dbExecute(con, "
CREATE TABLE products (
prodID INTEGER PRIMARY KEY,
prod TEXT
);")
dbExecute(con, "
CREATE TABLE reps (
repID INTEGER PRIMARY KEY,
firstName TEXT,
lastName TEXT,
territory TEXT
);")
dbExecute(con, "
CREATE TABLE customers (
custID INTEGER PRIMARY KEY,
cust TEXT,
country TEXT
);")
dbExecute(con, "
CREATE TABLE salestxn (
txnID INTEGER PRIMARY KEY,
date TEXT,
prodID INTEGER,
custID INTEGER,
repID INTEGER,
qty INTEGER,
amount INTEGER,
FOREIGN KEY(prodID) REFERENCES products(prodID),
FOREIGN KEY(custID) REFERENCES customers(custID),
FOREIGN KEY(repID) REFERENCES reps(repID)
);
")
# Get list of XML files
files <- dir("txn-xml", pattern = "pharmaSalesTxn.*\\.xml", full.names = TRUE)
# Load rep data
doc <- xmlParse("txn-xml/pharmaReps.xml")
rep <- data.frame(
firstName = xpathSApply(doc, "//rep/firstName/text()", xmlValue),
lastName = xpathSApply(doc, "//rep/lastName/text()", xmlValue),
territory = xpathSApply(doc, "//rep/territory/text()", xmlValue),
rID = xpathSApply(doc, "//rep", xmlGetAttr, "rID")
)
rep$rID <- gsub("r","", as.character(rep$rID))
reps <- data.frame(repID = rep$rID,
firstName = rep$firstName,
lastName = rep$lastName,
territory = rep$territory)
dbWriteTable(con, "reps", reps, overwrite = F, append = T)
# Load each file
for(file in files) {
# Parse XML
doc <- xmlParse(file)
# Extract data
txns <- xmlToDataFrame(nodes = getNodeSet(doc, "//txn"))
n.txns <- nrow(txns)
# Process dates
txns$act_date <- as.Date(txns$date, "%m/%d/%Y")
products <- data.frame(prod = unique(txns$prod))
products$prodID <- 100 + seq(1,nrow(products))
customers <- data.frame(cust = unique(txns$cust))
customers$custID <- 100 + seq(1,nrow(customers))
txns <- merge(txns, products, by.x = "prod", by.y = "prod", all.x = TRUE)
txns <- merge(txns, customers, by.x = "cust", by.y = "cust", all.x = TRUE)
salestxn <- data.frame(txnID = txns$txnID,
date = txns$date,
prodID = txns$prodID,
custID = txns$custID,
repID = txns$repID,
qty = txns$qty,
amount = txns$amount)
# Add to database
dbWriteTable(con, "products", products, overwrite = T,append = F)
dbWriteTable(con, "customers", customers, overwrite = T,append = F)
dbWriteTable(con, "salestxn", salestxn, overwrite = T,append = F)
}
dbDisconnect(con)
library(DBI)
library(RMySQL)
library(RSQLite)
library(dplyr)
library(tidyverse)
db_name_fh <- "sql9637398"
db_user_fh <- "sql9637398"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "GYPIuqDy7n"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
sqlite_con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
salestxn_df <- dbReadTable(sqlite_con, "salestxn")
products_df <- dbReadTable(sqlite_con, "products")
reps_df <- dbReadTable(sqlite_con, "reps")
dbExecute(mysql_con, "
CREATE TABLE IF NOT EXISTS product_facts (
product_name VARCHAR(50),
total_sold INT,
q1_sold INT,
q2_sold INT,
q3_sold INT,
q4_sold INT,
y2020_sold INT,
y2021_sold INT,
y2022_sold INT,
territory TEXT); ")
dbExecute(mysql_con, "
CREATE TABLE IF NOT EXISTS rep_facts (
rep_name VARCHAR(50),
total_sold INT,
q1_sold INT,
q2_sold INT,
q3_sold INT,
q4_sold INT,
y2020_sold INT,
y2021_sold INT,
y2022_sold INT,
product_name TEXT); ")
list_df <- list(salestxn_df, products_df)
data_df <- list_df %>% reduce(inner_join, by = 'prodID')
data_df$repID <- as.numeric(data_df$repID)
list_df <- list(data_df, reps_df)
data_df <- list_df %>% reduce(inner_join, by = 'repID')
data_df$qty <- as.numeric(data_df$qty)
data_df$date <- as.Date(data_df$date, '%m/%d/%Y')
# Aggregate to product_facts structure
product_facts <- aggregate(qty~prod+territory, data = data_df, sum)
# Adding quarterly aggregations
product_facts <- transform(product_facts,
q1_sold = ifelse(quarter(data_df$date) == 1, data_df$qty, 0),
q2_sold = ifelse(quarter(data_df$date) == 2, data_df$qty, 0),
q3_sold = ifelse(quarter(data_df$date) == 3, data_df$qty, 0),
q4_sold = ifelse(quarter(data_df$date) == 4, data_df$qty, 0))
# Adding yearly aggregates
product_facts <- transform(product_facts,
y2020_sold = ifelse(year(data_df$date) == 2020, data_df$qty, 0),
y2021_sold = ifelse(year(data_df$date) == 2021, data_df$qty, 0),
y2022_sold = ifelse(year(data_df$date) == 2022, data_df$qty, 0))
rep_facts <- reps_df %>%
full_join(data_df) %>%
group_by(firstName, lastName) %>%
summarise(
total_sold = sum(qty, na.rm = T),
q1_sold = sum(qty[quarter(date) == 1], na.rm = T),
q2_sold = sum(qty[quarter(date) == 2], na.rm = T),
q3_sold = sum(qty[quarter(date) == 3], na.rm = T),
q4_sold = sum(qty[quarter(date) == 4], na.rm = T),
y2020_sold = sum(qty[year(date) == 2020], na.rm = T),
y2021_sold = sum(qty[year(date) == 2021], na.rm = T),
y2022_sold = sum(qty[year(date) == 2022], na.rm = T)
)
dbWriteTable(mysql_con, "product_facts", product_facts, overwrite = T, append = F)
dbWriteTable(mysql_con, "rep_facts", rep_facts, overwrite = T, append = F)
dbDisconnect(mysql_con)
dbDisconnect(sqlite_con)
library(RSQLite)
sqlite_con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
library(RMySQL)
db_name_fh <- "sql9637398"
db_user_fh <- "sql9637398"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "GYPIuqDy7n"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
query <- "
SELECT firstName, lastName,
y2020_sold,
y2021_sold,
y2022_sold
FROM rep_facts
ORDER BY y2020_sold DESC
LIMIT 5;"
top_reps <- dbGetQuery(mysql_con, query)
print(knitr::kable(top_reps))
total <- dbGetQuery(mysql_con, "
SELECT
SUM(y2020_sold) AS y2020,
SUM(y2021_sold) AS y2021,
SUM(y2022_sold) AS y2022
FROM rep_facts
")
print(total)
total <- dbGetQuery(mysql_con, "
SELECT
SUM(y2020_sold) AS y2020,
SUM(y2021_sold) AS y2021,
SUM(y2022_sold) AS y2022
FROM rep_facts
")
print(total)
years <- dbGetQuery(con, "
SELECT
2020 AS year, SUM(y2020_sold) AS total
FROM rep_facts
UNION
SELECT
2021 AS year, SUM(y2021_sold) AS total
FROM rep_facts
UNION
SELECT
2022 AS year, SUM(y2022_sold) AS total
FROM rep_facts
")
total <- dbGetQuery(mysql_con, "
SELECT
SUM(y2020_sold) AS y2020,
SUM(y2021_sold) AS y2021,
SUM(y2022_sold) AS y2022
FROM rep_facts
")
print(total)
years <- dbGetQuery(mysql_con, "
SELECT
2020 AS year, SUM(y2020_sold) AS total
FROM rep_facts
UNION
SELECT
2021 AS year, SUM(y2021_sold) AS total
FROM rep_facts
UNION
SELECT
2022 AS year, SUM(y2022_sold) AS total
FROM rep_facts
")
View(years)
library(ggplot2)
ggplot(years, aes(x = year, y = total)) +
geom_line() +
labs(title = "Total Sales Per Year",
x = "Year",
y = "Total Sales")
library(ggplot2)
ggplot(years, aes(x = year, y = total)) +
geom_line() +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Total Sales Per Year",
x = "Year",
y = "Total Sales"
)
query <- "
SELECT firstName, lastName,
y2020_sold,
y2021_sold,
y2022_sold
FROM rep_facts
ORDER BY y2020_sold DESC
LIMIT 5;"
top_reps <- dbGetQuery(mysql_con, query)
# Connect to SQLite
library(RSQLite)
library(XML)
con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
# Create tables
dbExecute(con, "
CREATE TABLE products (
prodID INTEGER PRIMARY KEY,
prod TEXT
);")
dbExecute(con, "
CREATE TABLE reps (
repID INTEGER PRIMARY KEY,
firstName TEXT,
lastName TEXT,
territory TEXT
);")
dbExecute(con, "
CREATE TABLE customers (
custID INTEGER PRIMARY KEY,
cust TEXT,
country TEXT
);")
dbExecute(con, "
CREATE TABLE salestxn (
txnID INTEGER PRIMARY KEY,
date TEXT,
prodID INTEGER,
custID INTEGER,
repID INTEGER,
qty INTEGER,
amount INTEGER,
FOREIGN KEY(prodID) REFERENCES products(prodID),
FOREIGN KEY(custID) REFERENCES customers(custID),
FOREIGN KEY(repID) REFERENCES reps(repID)
);
")
# Get list of XML files
files <- dir("txn-xml", pattern = "pharmaSalesTxn.*\\.xml", full.names = TRUE)
# Load rep data
doc <- xmlParse("txn-xml/pharmaReps.xml")
# Create dataframe rep from the XML
rep <- data.frame(
firstName = xpathSApply(doc, "//rep/firstName/text()", xmlValue),
lastName = xpathSApply(doc, "//rep/lastName/text()", xmlValue),
territory = xpathSApply(doc, "//rep/territory/text()", xmlValue),
rID = xpathSApply(doc, "//rep", xmlGetAttr, "rID")
)
rep$rID <- gsub("r","", as.character(rep$rID))
reps <- data.frame(repID = rep$rID,
firstName = rep$firstName,
lastName = rep$lastName,
territory = rep$territory)
dbWriteTable(con, "reps", reps, overwrite = F, append = T)
# Load each file
for(file in files) {
# Parse XML
doc <- xmlParse(file)
# Extract data
txns <- xmlToDataFrame(nodes = getNodeSet(doc, "//txn"))
n.txns <- nrow(txns)
# Process dates
txns$act_date <- as.Date(txns$date, "%m/%d/%Y")
# Extract Product data
products <- data.frame(prod = unique(txns$prod))
# Process ID
products$prodID <- 100 + seq(1,nrow(products))
# Extract customer data
customers <- data.frame(cust = unique(txns$cust))
# Process ID
customers$custID <- 100 + seq(1,nrow(customers))
# using a temporary dataframe for ease
txns <- merge(txns, products, by.x = "prod", by.y = "prod", all.x = TRUE)
txns <- merge(txns, customers, by.x = "cust", by.y = "cust", all.x = TRUE)
# defining and populating the salestxn dataframe
salestxn <- data.frame(txnID = txns$txnID,
date = txns$date,
prodID = txns$prodID,
custID = txns$custID,
repID = txns$repID,
qty = txns$qty,
amount = txns$amount)
# Add to database
dbWriteTable(con, "products", products, overwrite = T,append = F)
dbWriteTable(con, "customers", customers, overwrite = T,append = F)
dbWriteTable(con, "salestxn", salestxn, overwrite = T,append = F)
}
# Disconnecting Connection
dbDisconnect(con)
# Loading required Libraries
library(DBI)
library(RMySQL)
library(RSQLite)
library(dplyr)
library(tidyverse)
# Establishing MySQL server connection
db_name_fh <- "sql9639719"
db_user_fh <- "sql9639719"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "3ULuvSERWS"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
# Establishing local SQLite Connection
sqlite_con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
# Getting data from local database
salestxn_df <- dbReadTable(sqlite_con, "salestxn")
products_df <- dbReadTable(sqlite_con, "products")
reps_df <- dbReadTable(sqlite_con, "reps")
# Creating fact tables on MySQL Server
dbExecute(mysql_con, "
CREATE TABLE IF NOT EXISTS product_facts (
product_name VARCHAR(50),
total_sold INT,
q1_sold INT,
q2_sold INT,
q3_sold INT,
q4_sold INT,
y2020_sold INT,
y2021_sold INT,
y2022_sold INT,
territory TEXT); ")
dbExecute(mysql_con, "
CREATE TABLE IF NOT EXISTS rep_facts (
rep_name VARCHAR(50),
total_sold INT,
q1_sold INT,
q2_sold INT,
q3_sold INT,
q4_sold INT,
y2020_sold INT,
y2021_sold INT,
y2022_sold INT,
product_name TEXT); ")
# Joining data and processing datatypes
list_df <- list(salestxn_df, products_df)
data_df <- list_df %>% reduce(inner_join, by = 'prodID')
data_df$repID <- as.numeric(data_df$repID)
list_df <- list(data_df, reps_df)
data_df <- list_df %>% reduce(inner_join, by = 'repID')
data_df$qty <- as.numeric(data_df$qty)
data_df$date <- as.Date(data_df$date, '%m/%d/%Y')
# Aggregate to product_facts structure
product_facts <- aggregate(qty~prod+territory, data = data_df, sum)
# Adding quarterly aggregations
product_facts <- transform(product_facts,
q1_sold = ifelse(quarter(data_df$date) == 1, data_df$qty, 0),
q2_sold = ifelse(quarter(data_df$date) == 2, data_df$qty, 0),
q3_sold = ifelse(quarter(data_df$date) == 3, data_df$qty, 0),
q4_sold = ifelse(quarter(data_df$date) == 4, data_df$qty, 0))
# Adding yearly aggregates
product_facts <- transform(product_facts,
y2020_sold = ifelse(year(data_df$date) == 2020, data_df$qty, 0),
y2021_sold = ifelse(year(data_df$date) == 2021, data_df$qty, 0),
y2022_sold = ifelse(year(data_df$date) == 2022, data_df$qty, 0))
# Aggregating rep_facts with a different approach
rep_facts <- reps_df %>%
full_join(data_df) %>%
group_by(firstName, lastName) %>%
summarise(
total_sold = sum(qty, na.rm = T),
q1_sold = sum(qty[quarter(date) == 1], na.rm = T),
q2_sold = sum(qty[quarter(date) == 2], na.rm = T),
q3_sold = sum(qty[quarter(date) == 3], na.rm = T),
q4_sold = sum(qty[quarter(date) == 4], na.rm = T),
y2020_sold = sum(qty[year(date) == 2020], na.rm = T),
y2021_sold = sum(qty[year(date) == 2021], na.rm = T),
y2022_sold = sum(qty[year(date) == 2022], na.rm = T)
)
# Writing Tables to the MySQL server.
dbWriteTable(mysql_con, "product_facts", product_facts, overwrite = T, append = F)
dbWriteTable(mysql_con, "rep_facts", rep_facts, overwrite = T, append = F)
# Disconnecting Connections
dbDisconnect(mysql_con)
dbDisconnect(sqlite_con)
library(RSQLite)
sqlite_con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
library(RMySQL)
db_name_fh <- "sql9637398"
db_user_fh <- "sql9637398"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "GYPIuqDy7n"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
library(RSQLite)
sqlite_con <- dbConnect(RSQLite::SQLite(), "pharma.sqlite")
library(RMySQL)
db_name_fh <- "sql9639719"
db_user_fh <- "sql9639719"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "3ULuvSERWS"
db_port_fh <- 3306
mysql_con <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh,
dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
query <- "
SELECT firstName, lastName,
y2020_sold,
y2021_sold,
y2022_sold
FROM rep_facts
ORDER BY y2020_sold DESC
LIMIT 5;"
top_reps <- dbGetQuery(mysql_con, query)
print(knitr::kable(top_reps))
total <- dbGetQuery(mysql_con, "
SELECT
SUM(y2020_sold) AS y2020,
SUM(y2021_sold) AS y2021,
SUM(y2022_sold) AS y2022
FROM rep_facts
")
print(total)
years <- dbGetQuery(mysql_con, "
SELECT
2020 AS year, SUM(y2020_sold) AS total
FROM rep_facts
UNION
SELECT
2021 AS year, SUM(y2021_sold) AS total
FROM rep_facts
UNION
SELECT
2022 AS year, SUM(y2022_sold) AS total
FROM rep_facts
")
library(ggplot2)
ggplot(years, aes(x = year, y = total)) +
geom_line() +
scale_y_continuous(labels = scales::comma) +
labs(
title = "Total Sales Per Year",
x = "Year",
y = "Total Sales"
)
