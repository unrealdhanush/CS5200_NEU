n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629180"
db_user_fh <- "sql9629180"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "DBHrT1IgIf"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = convert(datetime, bds.raw$flight_date),
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
View(df.airports)
View(df.flights)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = as.Date(bds.raw$flight_date, format = "%m/%d/%Y"),
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
View(df.airports)
View(df.flights)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629180"
db_user_fh <- "sql9629180"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "DBHrT1IgIf"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = as.Date(bds.raw$flight_date, format = "%m/%d/%Y"),
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629180"
db_user_fh <- "sql9629180"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "DBHrT1IgIf"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = as.Date(bds.raw$flight_date, format = "%m/%d/%Y"),
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
View(bds.raw)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629180"
db_user_fh <- "sql9629180"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "DBHrT1IgIf"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629190"
db_user_fh <- "sql9629190"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "1JaewqfKIc"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
bds.raw$flight_date <- as.Date(bds.raw$flight_date, format = "%m/%d/%Y")
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
View(df.flights)
rs <- dbGetQuery(mydb, "select month(f.dates) as month, year(f.dates) as year, count(*) as total_strikes
from strikes s left join flights f on s.fid = f.fid group by year(f.dates), month(f.dates)
order by year(f.dates), month(f.dates);")
View(rs)
View(rs)
# Assuming the dataframe is named 'rs'
# Convert month column to a factor with month names
rs$month <- factor(rs$month, labels = month.abb)
# Create the column chart
plot(rs$month, rs$num_strikes, type = "h", lwd = 10, xlab = "Month", ylab = "Number of Bird Strikes",
main = "Number of Birds Striking Aircraft by Month")
# Add data labels
text(rs$month, rs$num_strikes, labels = rs$num_strikes, pos = 3)
# Rotate x-axis labels
par(las = 2)
# Adjust y-axis limits if needed
# ylim <- range(df$num_strikes)
# ylim <- c(0, ylim[2] * 1.1)  # Increase upper limit by 10%
# ylim(ylim)
# Add a legend
legend("topright", legend = "Number of Bird Strikes", bty = "n", cex = 0.8, lwd = 10)
# Assuming the dataframe is named 'rs'
# Convert month column to a factor with month names
rs$month <- factor(rs$month, labels = month.abb)
# Create the column chart
plot(rs$month, rs$num_strikes, type = "h", lwd = 2, xlab = "Number of Bird Strikes", ylab = "Month",
main = "Number of Birds Striking Aircraft by Month")
# Add data labels
text(rs$month, rs$num_strikes, labels = rs$num_strikes, pos = 3)
# Rotate x-axis labels
par(las = 2)
legend("topright", legend = "Number of Bird Strikes", bty = "n", cex = 0.8, lwd = 10)
View(rs)
rs <- dbGetQuery(mydb, "select month(f.dates) as month, year(f.dates) as year, count(*) as total_strikes
from strikes s left join flights f on s.fid = f.fid group by year(f.dates), month(f.dates)
order by year(f.dates), month(f.dates);")
plot(rs$month, rs$num_strikes, type = "h", lwd = 2, xlab = "Number of Bird Strikes", ylab = "Month",
main = "Number of Birds Striking Aircraft by Month")
text(rs$month, rs$num_strikes, labels = rs$num_strikes, pos = 3)
par(las = 2)
legend("topright", legend = "Number of Bird Strikes", bty = "n", cex = 0.8, lwd = 10)
View(rs)
View(rs)
plot(rs$year, rs$num_strikes,type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
text(rs$month, rs$num_strikes, labels = rs$num_strikes, pos = 3)
par(las = 2)
View(rs)
plot(rs$year, rs$num_strikes,type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
par(las = 2)
plot(rs$year, rs$num_strikes,type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
View(rs)
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by year")
install.packages("scatterplot3d")
library(scatterplot3d)
scatterplot3d(rs$month, rs$total_strikes, rs$year, type = "l", xlab = "month", ylab = "Strikes", zlab = "year", main = "Number of Birds Striking Aircraft by year")
library(scatterplot3d)
scatterplot3d(rs$month, rs$total_strikes, rs$year, type = "l", pch = 16, highlight.3d = TRUE, xlab = "month", ylab = "Strikes", zlab = "year", main = "Number of Birds Striking Aircraft by year")
library(scatterplot3d)
scatterplot3d(rs$month, rs$total_strikes, rs$year, type = "h", pch = 16, highlight.3d = TRUE, xlab = "month", ylab = "Strikes", zlab = "year", main = "Number of Birds Striking Aircraft by year")
install.packages("rgl")
library(rgl)
library(rgl)
library(scatterplot3d)
scatterplot3d(rs$month, rs$total_strikes, rs$year, type = "h", pch = 16, highlight.3d = TRUE, xlab = "month", ylab = "Strikes", zlab = "year", main = "Number of Birds Striking Aircraft by year")
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
install.packages("plotly")
library(plotly)
fig = plot_ly(rs, type = "scatter", mode = "lines")
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
library(plotly)
fig = plot_ly(rs$year, rs$total_strikes)
library(plotly)
fig = plot_ly(data = rs)
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
fig = plot_ly(data = rs)
View(fig)
library(plotly)
fig = plot_ly(data = rs)
fig.show()
library(plotly)
fig = plot_ly(data = rs)
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
library(plotly)
fig = plot_ly(data = rs, mode = "heatmap")
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
library(plotly)
fig = plot_ly(data = rs, type="scatter", mode = "heatmap")
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
View(fig)
library(plotly)
fig = plot_ly(x = rs$year, y = rs$total_strikes, type="scatter", mode = "heatmap")
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
library(plotly)
fig = plot_ly(x = rs$month, y = rs$total_strikes, type="scatter", mode = "heatmap")
fig
plot(rs$year, rs$total_strikes, type = "l", xlab = "year", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Year")
plot(rs$month, rs$total_strikes, type = "l", xlab = "month", ylab = "Strikes", main = "Number of Birds Striking Aircraft by Month")
View(df.flights)
View(df.strikes)
View(df.strikes)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629190"
db_user_fh <- "sql9629190"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "1JaewqfKIc"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
bds.raw$flight_date <- as.Date(bds.raw$flight_date, format = "%m/%d/%Y")
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
library(DBI)
library(RMySQL)
db_name_fh <- "sql9629190"
db_user_fh <- "sql9629190"
db_host_fh <- "sql9.freemysqlhosting.net"
db_pwd_fh <- "1JaewqfKIc"
db_port_fh <- 3306
mydb <-  dbConnect(RMySQL::MySQL(), user = db_user_fh, password = db_pwd_fh, dbname = db_name_fh, host = db_host_fh, port = db_port_fh)
bds.raw = read.csv("BirdStrikesData-V2.csv", header=T)
bds.raw$heavy_flag <- ifelse(bds.raw$heavy_flag == "Yes", 1, 0)
bds.raw$flight_date <- as.Date(bds.raw$flight_date, format = "%m/%d/%Y")
n.airports <- nrow(bds.raw)
df.airports <- data.frame(aid = 100 + match(bds.raw$origin, unique(bds.raw$origin)),
airportState = bds.raw$origin)
n.flights <- nrow(bds.raw)
df.flights <- data.frame(fid = 100 + seq(1,n.flights),
dates = bds.raw$flight_date,
airline = bds.raw$airline,
origin = df.airports$aid,
aircraft = bds.raw$aircraft,
altitude = bds.raw$altitude_ft,
heavy = bds.raw$heavy_flag)
n.conditions <- nrow(bds.raw)
df.conditions <- data.frame(cid = 100 + match(bds.raw$sky_conditions,unique(bds.raw$sky_conditions)),
sky_condition = bds.raw$sky_conditions)
n.strikes <- nrow(bds.raw)
df.strikes <- data.frame(sid = 10 + seq(1,n.strikes),
fid = df.flights$fid,
numbirds = bds.raw$wildlife_struck,
damage = ifelse(bds.raw$damage=="Caused damage", TRUE, FALSE),
altitude = bds.raw$altitude_ft,
conditions = df.conditions$cid)
for (r in 1:n.flights) {
f <- df.airports$aid[which(df.airports$airportState == bds.raw$origin[r])]
df.flights$origin[r] <- f
}
for (r in 1:n.strikes) {
s <- df.conditions$cid[which(df.conditions$sky_condition==bds.raw$sky_conditions[r])]
df.strikes$conditions[r] <- s
}
for (r in 2:n.strikes) {
p <- df.flights$fid[which(df.flights$dates==bds.raw$flight_date[r] &
df.flights$origin==bds.raw$origin[r] &
df.flights$airline==bds.raw$airline[r] &
df.flights$aircraft==bds.raw$aircraft[r] &
df.flights$altitude==bds.raw$altitude_ft[r])]
df.strikes$fid[r] <- p
}
dbWriteTable(mydb, "airports", df.airports, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "flights", df.flights, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "conditions", df.conditions, overwrite = F, append = T, row.names=F)
dbWriteTable(mydb, "strikes", df.strikes, overwrite = F, append = T, row.names=F)
rs <- dbGetQuery(mydb, "select month(f.dates) as month, year(f.dates) as year, count(*) as total_strikes
from strikes s left join flights f on s.fid = f.fid group by year(f.dates), month(f.dates)
order by year(f.dates), month(f.dates);")
rs <- dbGetQuery(mydb, "select month(f.dates) as month, year(f.dates) as year, count(*) as total_strikes
from strikes s left join flights f on s.fid = f.fid group by year(f.dates), month(f.dates)
order by year(f.dates), month(f.dates);")
rs
